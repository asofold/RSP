
RSP lists
--------------------


!!! more list cleanup ...


PLANNED / QUESTIOSN
-----------------------------

- ?(Add) Jail-like support. (deny enter, deny exit)
- !(add) command throwing support !

- !(add) Configuration for stats (period + n )

- ?(add) Handling conflicts on removing to-have perms / permdefs
- !(add) Configuration: remember which defs read from config, on re read just remove those + flag - delete on re-read (default = false) !,
- !(add) owner and member restriction for groups. [maybe an ANYWHERE group for owners, members ?]
- !(internals) Only check cache if data is checked.  
- !(internals) on removing - remove empty sets + empty maps!
- !(internals) make use of PlayerData.isChecked flag for performance.
- ?CHECK: policy - if to remove perms on logout ?
- ?Sometimes a full recheck might be necessary (pex reload) -> hook into the permissions plugin (!).
- ? for removal: iterate over all groups rather than all permdefs (or create preset sets for that).

***
- ?(add) permGroup reference counting ?
- !(internals) Only remove all perms on login or reload (!), and use all groups instead of all permdefs !.
- ?(internals) keep player data longer ? to avoid unnecessary rechecking ?
- !(add) hook for permission plugins ! [checkout all ?]
- !(internals) More efficient checkout all (check all player data and online players, but dont unnessecarily create PlayerData instances.
- !(internals) Split perm cache from id cache and last pos ? [id cache and last pos are internally controlled, will not change from outside, API is under control]
- ?(Add) For accuracy of heuristics: add a count for staying at the same position or a even a checking task.
- !(add) Events for leave and enter and possible other. -> config + API !

*(0.X.0) [RELEASE READY]
- !(add) Enable / disable.
- !NOTE: split PermDefs etc. from basic configuration ?
- !(internals) Get rid of unnecessary null checks.

- ?(add) issue server commands (or even player commands) on enter/leave (as with registered methods).



- !(add) Test cases for config / add+re,move permdefs
- ! TODO: ?call interfaces alltogether in the next tick (accumulated)
- ? policy for lowercase / uppercase naming ?
- ?(add) lazy-time in config for not checking again within that time. [maybe with lazy-dist2]

*** ? check: (how/if to)  refactor to map to groups (+reference count or sim.) instead of permdefs ?
** ! convention for naming of permdefs (lowercase?)

- ?(add) make available to have the on enter and onexit calls even if no permissions plugin is there.
- ?(add) Cache for who has been fully checked during enabled-runtime
- !(add) Have in memory which players are in which region ?

- ?(add) Add option to add/keep unused regions as well, to track where players are !
- ?(add) option to track WorldEdit selection ?


- ?(Add) API call for getting the regions a player is in.
- !(bugfix) region enter after login + restart [API: callOnEnter]?
- !(change) idCache: distinguish: deleteCache, expireCache 

?(add) Feature: last region enter timestamp ? 

***

- !(refactor): Use x,y,z anyway (allows for config setting region.testAtMaximumY
*** !(add) setWorldGuard: Test if worldguard works at all (maybe even schedule a random test!)! 
- ?(add) Permissions Phoenix support.
- !(add) Option to check a maximum y coordinate always !
- !(bugfix) All messages to console: start with [RSP] (filter method ?)
- !(add) Configuration for stats interval/n

---*



***
-  ?(add) Vault supports
- ! Essentials GroupManager support !
- !(add) lazydist flag for accuracy on leave !

*** Performance improvements + cleanup !

- (add) Colors to stats-message, if desired.

*** WOrk over to use groupsToAdd, GroupsToRemove, maybe same for permdefs (present, remove).
*** CHECK FOR valid positions on teleports etc. schedule teleport !
? use block pos for last valid position ?

- ?(add) only check within bounds on vehicle move if within lazy dist ?


- ?(add) digested PermDefData ? 
- ?(add) WG FLAG support

*** CHECK FOR PERFORMANCE IMPROVEMENTS

*** ADD ownership support 

? permission check API (hasPerm ( pl, loc, perm)

*** CHECK/DIGEST:
? more light weight register/unregister !
! remember checked out players (no rechecking).
?? more info on Per
- ingame permdef manip.
! keep player data a while after logout
! cfg option:no cache at all
! permdef: lazydist+ cache lifetime configurable ? (valid while active)
! cfg: lazydist/invalidation behavior: if to use cache lifetime at all
check(..) : clear cache => set flag, iterate over present if set.
! check performance with dynamic permission checks ( no cache for those !)
CHECK: are permissions detached ?
! Detach from WorldGuard (+provide internal solution for regions?)
! dynamic listener registration and unregistration + cmd ?!
- confine to arbitrary regions ?

? feature: keep track of all regions a player is in, allow on enter, on exit calls ?


*** [RELEASE]
- !(add) a command for a heavy check of all players ? + add task to manipulate all players perms that are on the server (once) (force checkout or so).


- ?(add) add stats for permission manipulation ?
*** consistency with calls : call_reason ? join, kick, quit, teleport, ....
- ?(add) Ownership based permdefs ?
*** check for parked etc: getPlayersInRegion
*** un,inkPermdDef and similar: the new group uses make it necessary to rethink those ... (checkout all ?, what to do with remove-enter etc. -> forget about heavy checks, just keep to what happens on region enter/exit ?)
?CHECK: where is PlayerData.isChecked used ? Does it need to be set in some more places ?
*** TODO Check calls: do/should they depend on ignore/filter-perm? If so, adjust impl: add lists to PlayerData
*** Way more error messages for critical points (startup etc)
*** Tackle avoid log message spam if something is missing (peridodic warning, remember checkled out players)
*** Tackle: has/hasnot cache + expiration vs changing filter/ignore perms -> inconsistency
- ?(add) Register events on demand + hasConfined flag for listeners (one class per event..)!
- ?(add) Support for messages on enter/leave and the like (respecting the permissions).
*** CHECK: Is portal creation event really necessary to check ? Teleport should do !
*** REFACTOR: Do not remove rids from cache, but do remove permission on expiration.
- ?(add) Support for a random choice for adding ?
*** Policy + Config and internals for removing / adding ALL permissions on quit/join etc.
*** ONGOING
- !(add) rsp info command , stating world confinement or all settings


*** PERFORMANCE TESTS WITH CHECKING PERMISSIONS BY WORLD !
*** PERFORMANCE TESTS WITH PERMISSION CACHE REMOVED !
- ?add freeze players ! 
- !(bugfix) Rare: Permission checks on target location (concerning the world).

? check: playrchangedworld and other: double checking !
?add: flag for preventing creation if out of portal radius
*** CLEANUP SETTINGS: when to checkout and if (make configurable so as to never if desired).
*** No uneccessary rechecking of permdefs if cache is valid, light perm check if recheck
- ?(add) options: never-save (i.e. more flags), full-checkout (possible: never fully checkout). 
- !(add) check/getData : if a player is checked out and there is no Map for the world: no checkout !
- !(bugfix) checkParked: prevent to iterate over all parked again and again (on scheduled task).

* ENSURE: API for rechecking a player (checkout)!
- ?(add) stats reset <name>
- ?(add) configure: checkout on cache-expiration ? []
- !(add) try-catch for the ...All methods and for mightSaveChanges etc.. (applies to isAvailable actually)
- !(add) Configurable: ticks and number for checkout parked (default: 1 per 2 ticks).

- !(check) latest versions of bPermissions, PEX: thread safe saving ?
- ?(add) expire parked list

* use checkConfinement for Respawn ?
-CHECK : resetting the lastvalidloc where ? (crossworld tp)
- !(bugfix) on crossworld tp: prevent tp ?

!(add) flag for permdefs or in general: restrict to a world or for all worlds

? allow defining external read-only-files to read further config stuff (allows other plugins to store stuff on shutdown) ?

! TEST / DOC: polygonal regions with WG + rsp + ping plugin or ping command! => DOES NOT WORK
!



!(bugfix) Preserve group order if possible? 

STACK
---------------------------------------------------

*** (3.0.0)
? API: get AFK time ?
? make it a permissions plugin (RSP.hasPermission(Player, Location)) [needs refactoring to have a virtual PlayerData object being used consistently ? Maybe also needs extensive caching of all sorts of things to be fast, on the other hand, fast....]

*** (2.0.0)

- ?(add) inheritance for permdefs ? 
! (add) priorities for permdefs ! [or use region priorities]
! (add) lazy-dist per permdef ! [to force a minimum]
s

*** (1.0.0)

*** VARIOUS
- ? stats for changing perms?
- ?(add) option to log permission group changes ?
- ?ADD DEBUG MODE (something, maybe generic permdefs are ok).
- ?get rid of creating portals, 

*** HOOKS
- ?(add) config list: add-hooks ?
- ?(add) config-list: exclude-hooks, to prevent using those hooks [By Factory name or by permissions name or by plugin name]
- ?(add) for Vault: RSPCore.dispatchSaveCommand + config: save-command (+ %world, %player), for those permission plugins that need and have saving that Vault does not do.

*** CONSISTENCY
- !(add) Consistency options (explicit permission removal): command based and automatic. [probably done by generic links]

*** CONFIGURATION

*** PRECISION
- ?(add) Priorities for permdefs ? [add@a, rem@b => add or rem]
- ?(add) Permdef specific lazy-dist ? [aim: exact exit] 

*** DOCS

*** BUGS
- !WAIT for Vault users feedback.

*** GENERIC LINKS
- Region link
- Ownership links are easy !
- CanBuild link !
!(add) Generic permdefs: owner (member) + join + quit + ...  -> world specific ? allow generic-links per world ! + add id to permdefdata (for faster reference !)

*** PERFORMANCE
- !(add) a applyGroupChanges method for interfaces (add, remove) so that setGroups can be used, where available.
? (add) index permissions ? -> rather not (potentially too many lateron). 

*** BUGS


- !CHECK: FORGOT
- !CHECK: bPermissions: Does have a "default world" ? if use-worlds is false that should be used !
? (add) Features that blend in well with all the checking: who is where, who has been in what region (with divisor for pos).


! (add) IMPROVE PERFORMANCE: cache groups during check, then use setgroups, therefore getgroups !  [has checks are much faster]
! (add) checkout-at-all
- !add: consistency commands that help removing all used groups for administrational purposes (maybe as flags too).
? use-superperms flag ?
- !(add) IPermissionsUser.applyChanges ! Use intelligent ways of changing groups (cache and then setGroups)!

* keep-permdefs-on-reload ?

* total stats ?


* !generic permdsefs : rethink configuration.

? pex : use setGroups !
? (add) Captcha feature [global one, + optionally per player a) by mod, b) by player himself! -> confine player to a position ]

? Freeze / player moved feature ?
? add playerInWorld and playerInRegion features
!(Add) AFK API with configurable permissions for durations and kick !

!(add) generic permdef: nowhere (no region)
!(add) keep track of all regions a user is in!


*** Make independent of Permission plugin -> add superperms hook (instead of dummy) check: allow plugins, deny plugins ?

? Update API for transient groups (Add some).

***
? concentrate all player data in ... PlayerData (no extra mapping for transient groups?).
? Calculate all group changes at once (setGroups).

*** change dummyperms to superperms ! ? how: adding / removing groups: fail ?.

onGRoupChangeFailure impls.




?user.prepare: always check result (with empty clause :p)

*** CONFIG UPDATE
?config: allow to prevent using certain hooks ? or at least change to superperms hook (+isAvailable strategy).
? world dependent settings: allow flag for not setting the  
? (add) Config: groups to remove: chekc users on login or so (+playerdata flag + reset those on reload). 
- much more useful info to rsp info (also comment about /rsp stats)
!(add) Info about permissions to the config. 

*** ? Add generic permdefs for being in a world.


*** 
?(add) AFK functionality - a) accurate b) advanced: minecart cheats tc   
!(add) options for "light checks" (world permdefs but no region checks) !

?consider: similar to PEX: bypass the recalculate permissions thingy somehow ?


consider some queuing or tick task design ?+

actually: add confining players to a set of regions ? [probably needs persisting fallback tp positions?]

consider: decorating group sets for ranks ? [maybe for context manager for mixin prefixes]

******************* CLEANUP LISTS *****************************

*** Half a permissions plugin

? add option like "insert-groups", to not add to end but insert to front.

*** sophisticated caching ?

? rethink complete concept with groups etc ? -> decorate permission groups ? (allow remove)

!(Add) permdefs to be added in general (world change, join etc) => use those for flying permissions + way to make them inactive

? have or have-always permdefs ? -> might be settled with generic permdefs (default, per world,) __global__ links ? 

* cleanup RegionEnter/Exit -> not to register with a permdef ?

?have outside: remember what was removed + add on checkout ?

?assign priorites to external groups as well ? [done by permdefs!]

*** Translate have-inside and have-outside to differing priorities for enter/exit

!(add) priorities to transient permissions handling

!(add) Use priority also for group ordering (? 2 switches: ascending + how to relate to perm plugins groups).
!(add) priorites to groups (if added / removed) => use maps to highest priorities for add, remove => actual action

*** ? bugfix about expiraton / removal ?

*** ? compat: remove / add one by one (still by calculated order) or + getGroups + setGroups
? experimental: tick task design ?

*** Check new event hierarchy (super classes).

*** Config changes.

*** Add something like not_inside

*** "Atomic" changes/checks for permissions / permdefs / groups. [check: is already the case more or less, might put exit/enter calls after manipulations.]

*** Expiration management (...)

*** Object reuse (!) -> RuntimeSet for the check routine?

*** Region enter / exit, Redesign + call at end or before processing ? [1. lazy dist 2. regions 3. perms/groups 4. IRegionEnter/Exit]

*** consider redesign: keep track of regions all the time.

*** HANDLE ALL GROUPS AT ONCE, preserve order, respect priorities.

? generic permdefs: ownership, membership fixed ids assign "by hand", + maybe everywhere

*** Test / Tweak group ordering in IPermissionUser [might add: reverse order 2x + where to add new groups ?]

exempt till next server tick or for a number of ticks ? [simlar to ms count though ..]

*** Other time measurement than ms: server ticks + count in lag (tick task) !

? add lazy-dist per player

! tweak confinement code !

? add permissions to permdefs / group use ?

might have to use player login event for permission setting!

? Add API + hooks for like vanish plugins to add permissions depending vanish state etc. [hooks => events, bind: eventname: permdefs]

removePermsById: check: maybe add an update flag ?



consider: perm op defaults etc, allow overriding by config?


*** Region independence ?
+ Allow defining zones (file + ingame) mixing them in with worldguard ?
+ 2d zones ?
+ interchangeable region definition use worldedit or own way to define (!)

*** More concept for full perm plugin
!rich group definitions in extra files with inheritance concepts !

*** Permissions checking:
? Add inspection command to inspect permissions of a player / group / ... also to show info about permfdefs priorities if from plugin or not.
! add hasperm commmand (rsp haqsperm or hasperm)


*** More fully superperms support.
-> does not fully work if the parent nodes are included as well... [consider letting perms override for child perm setups, or use PErmissible hack like Pex]
!Add all child permissions recursively for a certain node (!).

? timing constraints for adding permdefs.

! consider override on same function call ! [or on same priority]

*** Quick go on ownership perms.

consider: per permdef lazydist ? [data holds minimum lazydist of all active permdefs]

consider: generic names configurable ? (__global__, __owner__, __member__) ?canbuild

consider: replace-schema for permissions ([rid] to be replaced by the region id).

***


consider: region enter + exit: generic things calls: still call with the real regions names !? <- technically impossible..



***************************************************************** 
***************************************************************** 
***************************************************************** 
***************************************************************** 
*** Full permissions plugin ***

* Extensions
- Extend commands to cover current functionality (also altering it).
- Extend functionality and commands to allow changing of groups during runtime.
- Database support (at least ebeans).

* "Minimal version"
- Separate players and groups.
- Allow flexible group inheritance.
- Priorities for groups and single permissions. (allow config sections as well plain permissions)
- Negated permissions (as now).
- Import PEX setup
- YES: Reload command yes, assigning groups and permissions at runtime yes.
- NO: Altering groups at runtime.
- Fully tabbable commands (!).
- Background data structures for fast updating?
- How to integrate current transient groups etc.


---------------------


using rsp without perms plugin: checkout would not perform changes ....


PROBLEMS:
    teleport / respawn / similar: player may have filter permission at from but not at to.
    might invalidate task if other events can be used to trigger the check -> move, interact, command. NOTE: reset cahce tiemstamp
    -> use recheck instead ?



option to clear cache on changed regions ?

settings are not set correctly (lifetimeCache).


(!) Ensure ignore perm does not prevent removal due to region exit [have-inside]. ~ can/should it be distinguished from remove-exit etc.?
    alt: Add flag to remove groups if ignored to permdefs. ~ remove-if-ignored: false (default) | true
    alt2: Fine grained perms: ignore-add-perm + ignore-remove-perm (+ ignore-perm)

